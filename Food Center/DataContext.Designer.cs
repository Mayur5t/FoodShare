//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 01-02-2022 11:52:02
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace FoodCenterContext
{

    [DatabaseAttribute(Name = "Food Center")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class FoodCenterDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(FoodCenterDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCategory(Category instance);
        partial void UpdateCategory(Category instance);
        partial void DeleteCategory(Category instance);
        partial void InsertRefreshToken(RefreshToken instance);
        partial void UpdateRefreshToken(RefreshToken instance);
        partial void DeleteRefreshToken(RefreshToken instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertSignUp(SignUp instance);
        partial void UpdateSignUp(SignUp instance);
        partial void DeleteSignUp(SignUp instance);
        partial void InsertUserRefresh(UserRefresh instance);
        partial void UpdateUserRefresh(UserRefresh instance);
        partial void DeleteUserRefresh(UserRefresh instance);

        #endregion

        public FoodCenterDataContext() :
        base(@"Data Source=DESKTOP-5H6J294;Initial Catalog=""Food Center"";Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public FoodCenterDataContext(MappingSource mappingSource) :
        base(@"Data Source=DESKTOP-5H6J294;Initial Catalog=""Food Center"";Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public FoodCenterDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FoodCenterDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FoodCenterDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FoodCenterDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Category> Categories
        {
            get
            {
                return this.GetTable<Category>();
            }
        }

        public Devart.Data.Linq.Table<RefreshToken> RefreshTokens
        {
            get
            {
                return this.GetTable<RefreshToken>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public Devart.Data.Linq.Table<SignUp> SignUps
        {
            get
            {
                return this.GetTable<SignUp>();
            }
        }

        public Devart.Data.Linq.Table<UserRefresh> UserRefreshes
        {
            get
            {
                return this.GetTable<UserRefresh>();
            }
        }
    }
}

namespace FoodCenterContext
{

    /// <summary>
    /// There are no comments for FoodCenterContext.Category in the schema.
    /// </summary>
    [Table(Name = @"dbo.Category")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryId;

        private string _CategoryName;

        private string _CategoryDescription;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnCategoryDescriptionChanging(string value);
        partial void OnCategoryDescriptionChanged();
        #endregion

        public Category()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Storage = "_CategoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging("CategoryId");
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [Column(Storage = "_CategoryName", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if (this._CategoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging("CategoryName");
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryDescription in the schema.
        /// </summary>
        [Column(Name = @"Category_Description", Storage = "_CategoryDescription", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string CategoryDescription
        {
            get
            {
                return this._CategoryDescription;
            }
            set
            {
                if (this._CategoryDescription != value)
                {
                    this.OnCategoryDescriptionChanging(value);
                    this.SendPropertyChanging("CategoryDescription");
                    this._CategoryDescription = value;
                    this.SendPropertyChanged("CategoryDescription");
                    this.OnCategoryDescriptionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.RefreshToken in the schema.
    /// </summary>
    [Table(Name = @"dbo.RefreshToken")]
    public partial class RefreshToken : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RefreshID;

        private string _RToken;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRefreshIDChanging(int value);
        partial void OnRefreshIDChanged();
        partial void OnRTokenChanging(string value);
        partial void OnRTokenChanged();
        #endregion

        public RefreshToken()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RefreshID in the schema.
        /// </summary>
        [Column(Storage = "_RefreshID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RefreshID
        {
            get
            {
                return this._RefreshID;
            }
            set
            {
                if (this._RefreshID != value)
                {
                    this.OnRefreshIDChanging(value);
                    this.SendPropertyChanging("RefreshID");
                    this._RefreshID = value;
                    this.SendPropertyChanged("RefreshID");
                    this.OnRefreshIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RToken in the schema.
        /// </summary>
        [Column(Storage = "_RToken", CanBeNull = false, DbType = "NVARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string RToken
        {
            get
            {
                return this._RToken;
            }
            set
            {
                if (this._RToken != value)
                {
                    this.OnRTokenChanging(value);
                    this.SendPropertyChanging("RToken");
                    this._RToken = value;
                    this.SendPropertyChanged("RToken");
                    this.OnRTokenChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.Role in the schema.
    /// </summary>
    [Table(Name = @"dbo.Role")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RoleId;

        private string _RoleName;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        partial void OnRoleNameChanging(string value);
        partial void OnRoleNameChanged();
        #endregion

        public Role()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RoleId in the schema.
        /// </summary>
        [Column(Name = @"Role_Id", Storage = "_RoleId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RoleId
        {
            get
            {
                return this._RoleId;
            }
            set
            {
                if (this._RoleId != value)
                {
                    this.OnRoleIdChanging(value);
                    this.SendPropertyChanging("RoleId");
                    this._RoleId = value;
                    this.SendPropertyChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleName in the schema.
        /// </summary>
        [Column(Name = @"Role_Name", Storage = "_RoleName", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string RoleName
        {
            get
            {
                return this._RoleName;
            }
            set
            {
                if (this._RoleName != value)
                {
                    this.OnRoleNameChanging(value);
                    this.SendPropertyChanging("RoleName");
                    this._RoleName = value;
                    this.SendPropertyChanged("RoleName");
                    this.OnRoleNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.SignUp in the schema.
    /// </summary>
    [Table(Name = @"dbo.Sign_Up")]
    public partial class SignUp : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _EmailId;

        private string _Password;

        private string _ConfirmPassword;

        private string _StoreName;

        private string _StoreAddress;

        private string _StoreEmailid;

        private decimal _StorePhoneNo;

        private decimal? _StoreAlternatePhoneNo;

        private int _DeliveryRadius;

        private string _StoreLogo;

        private int? _RoleId;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnEmailIdChanging(string value);
        partial void OnEmailIdChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnConfirmPasswordChanging(string value);
        partial void OnConfirmPasswordChanged();
        partial void OnStoreNameChanging(string value);
        partial void OnStoreNameChanged();
        partial void OnStoreAddressChanging(string value);
        partial void OnStoreAddressChanged();
        partial void OnStoreEmailidChanging(string value);
        partial void OnStoreEmailidChanged();
        partial void OnStorePhoneNoChanging(decimal value);
        partial void OnStorePhoneNoChanged();
        partial void OnStoreAlternatePhoneNoChanging(decimal? value);
        partial void OnStoreAlternatePhoneNoChanged();
        partial void OnDeliveryRadiusChanging(int value);
        partial void OnDeliveryRadiusChanged();
        partial void OnStoreLogoChanging(string value);
        partial void OnStoreLogoChanged();
        partial void OnRoleIdChanging(int? value);
        partial void OnRoleIdChanged();
        #endregion

        public SignUp()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmailId in the schema.
        /// </summary>
        [Column(Name = @"Email_Id", Storage = "_EmailId", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string EmailId
        {
            get
            {
                return this._EmailId;
            }
            set
            {
                if (this._EmailId != value)
                {
                    this.OnEmailIdChanging(value);
                    this.SendPropertyChanging("EmailId");
                    this._EmailId = value;
                    this.SendPropertyChanged("EmailId");
                    this.OnEmailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Storage = "_Password", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ConfirmPassword in the schema.
        /// </summary>
        [Column(Name = @"Confirm_Password", Storage = "_ConfirmPassword", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ConfirmPassword
        {
            get
            {
                return this._ConfirmPassword;
            }
            set
            {
                if (this._ConfirmPassword != value)
                {
                    this.OnConfirmPasswordChanging(value);
                    this.SendPropertyChanging("ConfirmPassword");
                    this._ConfirmPassword = value;
                    this.SendPropertyChanged("ConfirmPassword");
                    this.OnConfirmPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreName in the schema.
        /// </summary>
        [Column(Name = @"Store_Name", Storage = "_StoreName", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string StoreName
        {
            get
            {
                return this._StoreName;
            }
            set
            {
                if (this._StoreName != value)
                {
                    this.OnStoreNameChanging(value);
                    this.SendPropertyChanging("StoreName");
                    this._StoreName = value;
                    this.SendPropertyChanged("StoreName");
                    this.OnStoreNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreAddress in the schema.
        /// </summary>
        [Column(Name = @"Store_Address", Storage = "_StoreAddress", CanBeNull = false, DbType = "NVARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string StoreAddress
        {
            get
            {
                return this._StoreAddress;
            }
            set
            {
                if (this._StoreAddress != value)
                {
                    this.OnStoreAddressChanging(value);
                    this.SendPropertyChanging("StoreAddress");
                    this._StoreAddress = value;
                    this.SendPropertyChanged("StoreAddress");
                    this.OnStoreAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreEmailid in the schema.
        /// </summary>
        [Column(Name = @"Store_Emailid", Storage = "_StoreEmailid", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string StoreEmailid
        {
            get
            {
                return this._StoreEmailid;
            }
            set
            {
                if (this._StoreEmailid != value)
                {
                    this.OnStoreEmailidChanging(value);
                    this.SendPropertyChanging("StoreEmailid");
                    this._StoreEmailid = value;
                    this.SendPropertyChanged("StoreEmailid");
                    this.OnStoreEmailidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StorePhoneNo in the schema.
        /// </summary>
        [Column(Name = @"Store_PhoneNo", Storage = "_StorePhoneNo", CanBeNull = false, DbType = "NUMERIC(13) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal StorePhoneNo
        {
            get
            {
                return this._StorePhoneNo;
            }
            set
            {
                if (this._StorePhoneNo != value)
                {
                    this.OnStorePhoneNoChanging(value);
                    this.SendPropertyChanging("StorePhoneNo");
                    this._StorePhoneNo = value;
                    this.SendPropertyChanged("StorePhoneNo");
                    this.OnStorePhoneNoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreAlternatePhoneNo in the schema.
        /// </summary>
        [Column(Name = @"Store_Alternate_PhoneNo", Storage = "_StoreAlternatePhoneNo", DbType = "NUMERIC(13)", UpdateCheck = UpdateCheck.Never)]
        public decimal? StoreAlternatePhoneNo
        {
            get
            {
                return this._StoreAlternatePhoneNo;
            }
            set
            {
                if (this._StoreAlternatePhoneNo != value)
                {
                    this.OnStoreAlternatePhoneNoChanging(value);
                    this.SendPropertyChanging("StoreAlternatePhoneNo");
                    this._StoreAlternatePhoneNo = value;
                    this.SendPropertyChanged("StoreAlternatePhoneNo");
                    this.OnStoreAlternatePhoneNoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryRadius in the schema.
        /// </summary>
        [Column(Name = @"Delivery_Radius", Storage = "_DeliveryRadius", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int DeliveryRadius
        {
            get
            {
                return this._DeliveryRadius;
            }
            set
            {
                if (this._DeliveryRadius != value)
                {
                    this.OnDeliveryRadiusChanging(value);
                    this.SendPropertyChanging("DeliveryRadius");
                    this._DeliveryRadius = value;
                    this.SendPropertyChanged("DeliveryRadius");
                    this.OnDeliveryRadiusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StoreLogo in the schema.
        /// </summary>
        [Column(Name = @"Store_Logo", Storage = "_StoreLogo", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string StoreLogo
        {
            get
            {
                return this._StoreLogo;
            }
            set
            {
                if (this._StoreLogo != value)
                {
                    this.OnStoreLogoChanging(value);
                    this.SendPropertyChanging("StoreLogo");
                    this._StoreLogo = value;
                    this.SendPropertyChanged("StoreLogo");
                    this.OnStoreLogoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleId in the schema.
        /// </summary>
        [Column(Name = @"Role_Id", Storage = "_RoleId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? RoleId
        {
            get
            {
                return this._RoleId;
            }
            set
            {
                if (this._RoleId != value)
                {
                    this.OnRoleIdChanging(value);
                    this.SendPropertyChanging("RoleId");
                    this._RoleId = value;
                    this.SendPropertyChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FoodCenterContext.UserRefresh in the schema.
    /// </summary>
    [Table(Name = @"dbo.UserRefresh")]
    public partial class UserRefresh : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _UserEmailId;

        private int _RefreshId;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserEmailIdChanging(string value);
        partial void OnUserEmailIdChanged();
        partial void OnRefreshIdChanging(int value);
        partial void OnRefreshIdChanged();
        #endregion

        public UserRefresh()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserEmailId in the schema.
        /// </summary>
        [Column(Storage = "_UserEmailId", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserEmailId
        {
            get
            {
                return this._UserEmailId;
            }
            set
            {
                if (this._UserEmailId != value)
                {
                    this.OnUserEmailIdChanging(value);
                    this.SendPropertyChanging("UserEmailId");
                    this._UserEmailId = value;
                    this.SendPropertyChanged("UserEmailId");
                    this.OnUserEmailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RefreshId in the schema.
        /// </summary>
        [Column(Storage = "_RefreshId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RefreshId
        {
            get
            {
                return this._RefreshId;
            }
            set
            {
                if (this._RefreshId != value)
                {
                    this.OnRefreshIdChanging(value);
                    this.SendPropertyChanging("RefreshId");
                    this._RefreshId = value;
                    this.SendPropertyChanged("RefreshId");
                    this.OnRefreshIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
